----------------------Extended Excercise on Joins, Comparision Operators, Logical Operators and Merges.
---------------------------------------------DDL------------------------------
CREATE TABLE EMPLOYEEES(
E_id NUMBER(9) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
E_first VARCHAR(35) NOT NULL,
E_last VARCHAR(35),
Age INT,
Gender CHAR(6),
Dept_id NUMBER(9),
Mgr_id NUMBER(9),
Salary NUMBER,
Joining_date date,
Leaving_date date
);


CREATE TABLE DEPARTMEENTS(
Dept_id NUMBER(9) GENERATED BY DEFAULT AS IDENTITY(START WITH 50 INCREMENT BY 1) PRIMARY KEY,
Dept_Name VARCHAR(35) NOT NULL
);


CREATE TABLE MANAGEERS(
Mgr_id NUMBER(9) GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1) PRIMARY KEY,
Mgr_first VARCHAR(35),
Mgr_last VARCHAR(35),
dept_id NUMBER(35),
Age INT,
Gender CHAR(6),
Salary NUMBER,
Joining_date date,
Leaving_date date
);



ALTER TABLE EMPLOYEEES ADD CONSTRAINT fk_employeees_departments_deptID 
FOREIGN KEY (dept_id) REFERENCES DEPARTMEENTS (dept_id);

ALTER TABLE EMPLOYEEES ADD CONSTRAINT fk_employeees_manageers_mgrID
FOREIGN KEY (mgr_id) REFERENCES MANAGEERS (mgr_id);

ALTER TABLE MANAGEERS ADD CONSTRAINT fk_manageers_departmeents_deptID
FOREIGN KEY (dept_id) REFERENCES DEPARTMEENTS (dept_id);


--ALTER TABLE EMPLOYEEES ADD CONSTRAINT chk_null_emp_Jdate
--ADD CHECK (Joining_date IS NOT NULL);

ALTER TABLE EMPLOYEEES 
MODIFY Joining_date date NOT NULL;

ALTER TABLE MANAGEERS
MODIFY Joining_date date NOT NULL;

ALTER TABLE EMPLOYEEES ADD CONSTRAINT chk_age_employeees
CHECK (Age > 18);

ALTER TABLE MANAGEERS ADD CONSTRAINT chk_age_manageers
CHECK (Age > 18);

ALTER TABLE EMPLOYEEES ADD CONSTRAINT chk_gender_employeees
CHECK (Gender IN ('Male', 'Female'));

ALTER TABLE MANAGEERS ADD CONSTRAINT chk_gender_manageers
CHECK (Gender IN ('Male','Female'));

ALTER TABLE MANAGEERS MODIFY 
Salary DEFAULT 25000;

ALTER TABLE MANAGEERS MODIFY 
Salary NOT NULL;

info MANAGEERS;
info EMPLOYEEES;
info DEPARTMEENTS;

-----------------------------------------------DML-----------------------------------------
-------------------------------------------Inserting data ---------------------------------
INSERT INTO DEPARTMENTS(dept_name)
VALUES('HR');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Sales');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('IT');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Marketing');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Accounting');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Management');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('QEC');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Contacts');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Finance');

INSERT INTO DEPARTMEENTS(dept_name)
VALUES('Administration');

SELECT * FROM MANAGEERS;
SELECT * FROM DEPARTMEENTS;



INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Rasheed', 'Latif', 52, 45, 'Male', 70000, TO_DATE('16-10-2008', 'DD-MM-YYYY'), TO_DATE('14-10-2010', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Saqib', 'Nizam', 50, 53, 'Male', 90000, TO_DATE('19-12-2010', 'DD-MM-YYYY'), TO_DATE('22-02-2012', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Baber', 'Ali', 57, 63, 'Male', 120000, TO_DATE('09-02-2011', 'DD-MM-YYYY'), null);


INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Sadia', 'Khan', 50, 45, 'Female', 95000, TO_DATE('15-03-2012', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Asim', 'Raza', 51, 52, 'Male', 120000, TO_DATE('20-07-2009', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Hira', 'Malik', 52, 39, 'Female', 88000, TO_DATE('11-01-2015', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Tariq', 'Javed', 53, 61, 'Male', 132000, TO_DATE('05-11-2008', 'DD-MM-YYYY'), TO_DATE('15-05-2022', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Maria', 'Shahid', 54, 42, 'Female', 97000, TO_DATE('17-06-2014', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Imran', 'Naeem', 55, 48, 'Male', 102000, TO_DATE('03-09-2011', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Ayesha', 'Rafiq', 56, 37, 'Female', 89000, TO_DATE('22-08-2016', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Noman', 'Iqbal', 58, 55, 'Male', 118000, TO_DATE('09-04-2010', 'DD-MM-YYYY'), NULL);




INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Baber', 'Ali', 57, 59, 'Male', 110000, TO_DATE('09-02-2010', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Sadia', 'Khan', 50, 45, 'Female', 95000, TO_DATE('15-03-2012', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Asim', 'Raza', 51, 52, 'Male', 120000, TO_DATE('20-07-2009', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Hira', 'Malik', 52, 39, 'Female', 88000, TO_DATE('11-01-2015', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Tariq', 'Javed', 53, 61, 'Male', 132000, TO_DATE('05-11-2008', 'DD-MM-YYYY'), TO_DATE('15-05-2022', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Maria', 'Shahid', 54, 42, 'Female', 97000, TO_DATE('17-06-2014', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Imran', 'Naeem', 55, 48, 'Male', 102000, TO_DATE('03-09-2011', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Ayesha', 'Rafiq', 56, 37, 'Female', 89000, TO_DATE('22-08-2016', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Noman', 'Iqbal', 58, 55, 'Male', 118000, TO_DATE('09-04-2010', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Faisal', 'Mehmood', 50, 46, 'Male', 101000, TO_DATE('10-02-2013', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Nida', 'Akhtar', 51, 34, 'Female', 87000, TO_DATE('14-10-2017', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Kamran', 'Ahmed', 52, 50, 'Male', 111000, TO_DATE('05-05-2011', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Rimsha', 'Saeed', 53, 41, 'Female', 94000, TO_DATE('22-12-2015', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Adnan', 'Qureshi', 54, 58, 'Male', 126000, TO_DATE('30-07-2007', 'DD-MM-YYYY'), TO_DATE('18-03-2021', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Lubna', 'Farooq', 55, 44, 'Female', 93000, TO_DATE('08-06-2014', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Hassan', 'Rafiq', 56, 53, 'Male', 117000, TO_DATE('16-01-2010', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Rania', 'Sheikh', 57, 36, 'Female', 86000, TO_DATE('03-09-2018', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Zafar', 'Abbas', 58, 60, 'Male', 128000, TO_DATE('21-05-2006', 'DD-MM-YYYY'), TO_DATE('30-12-2020', 'DD-MM-YYYY'));

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Mehwish', 'Iqbal', 53, 39, 'Female', 91000, TO_DATE('12-04-2016', 'DD-MM-YYYY'), NULL);

INSERT INTO MANAGEERS(Mgr_first, mgr_last, dept_id, age, gender, salary, joining_date, leaving_date)
VALUES('Rashid', 'Anwar', 52, 49, 'Male', 106000, TO_DATE('09-10-2011', 'DD-MM-YYYY'), NULL);



SELECT * FROM EMPLOYEEES;

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Adeel', 'Khan', 26, 'Male', 50, 101, 65000, TO_DATE('15-03-2020', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Sana', 'Ahmed', 29, 'Female', 51, 107, 72000, TO_DATE('11-07-2019', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Rizwan', 'Malik', 33, 'Male', 52, 109, 78000, TO_DATE('25-01-2018', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Iqra', 'Naseer', 27, 'Female', 53, 111, 68000, TO_DATE('05-06-2021', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Bilal', 'Rafiq', 31, 'Male', 54, 115, 76000, TO_DATE('17-02-2017', 'DD-MM-YYYY'), TO_DATE('12-09-2023', 'DD-MM-YYYY'));

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Hina', 'Qureshi', 25, 'Female', 55, 108, 64000, TO_DATE('20-04-2022', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Zeeshan', 'Ali', 30, 'Male', 56, 117, 81000, TO_DATE('12-10-2016', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Maria', 'Javed', 28, 'Female', 57, 113, 70000, TO_DATE('09-08-2020', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Omer', 'Khalid', 35, 'Male', 58, 119, 88000, TO_DATE('03-05-2015', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Laiba', 'Rehman', 24, 'Female', 50, 105, 60000, TO_DATE('18-02-2023', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Shahzaib', 'Anwar', 32, 'Male', 51, 112, 75000, TO_DATE('30-09-2018', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Erum', 'Yousaf', 29, 'Female', 52, 116, 71000, TO_DATE('10-03-2019', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Ali', 'Raza', 27, 'Male', 53, 118, 69000, TO_DATE('05-11-2021', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Mehak', 'Hassan', 31, 'Female', 54, 106, 74000, TO_DATE('08-01-2018', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Usman', 'Farid', 34, 'Male', 55, 110, 79000, TO_DATE('14-07-2016', 'DD-MM-YYYY'), TO_DATE('22-04-2022', 'DD-MM-YYYY'));

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Rimsha', 'Khalil', 26, 'Female', 56, 114, 66000, TO_DATE('21-09-2020', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Hassan', 'Tariq', 29, 'Male', 57, 111, 72000, TO_DATE('19-05-2019', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Maira', 'Zahid', 25, 'Female', 58, 115, 63000, TO_DATE('02-03-2022', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Nabeel', 'Haider', 33, 'Male', 50, 109, 78000, TO_DATE('09-12-2017', 'DD-MM-YYYY'), NULL);

INSERT INTO EMPLOYEEES(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES('Anum', 'Iqbal', 30, 'Female', 51, 117, 71000, TO_DATE('27-08-2018', 'DD-MM-YYYY'), NULL);

SELECT * FROM EMPLOYEEES;


------------------------------------UPDATING AND DELETING DATA-----------------------------------------
UPDATE EMPLOYEEES
SET Salary = Salary + 4000
WHERE (Salary < 70000);


DELETE FROM EMPLOYEEES
WHERE (SALARY < 20000) AND (E_id > 2);

------------------------------------MERGING DATA-------------------------------------------------------
CREATE TABLE Employeees_updated AS
(SELECT * FROM EMPLOYEEES);


SELECT * FROM Employeees_updated;

UPDATE Employeees_updated
SET SALARY = SALARY + 5000, Age = Age + 2;


MERGE INTO EMPLOYEEES T
USING EMPLOYEEES_UPDATED S
ON (S.E_id = T.E_id)

WHEN MATCHED THEN
UPDATE SET
T.SALARY = S.SALARY

WHEN NOT MATCHED THEN
INSERT(E_first, E_Last, Age, Gender, dept_id, mgr_id, salary, joining_date, leaving_date)
VALUES(S.E_first, S.E_Last, S.Age, S.Gender, S.dept_id, S.mgr_id, S.salary, S.joining_date, S.leaving_date); 


-----------------------------------------JOINSSSSS-------------------------------------------
----------------------------------------NATURAL JOIN-----------------------------------------
SELECT * FROM EMPLOYEEES;
SELECT * FROM DEPARTMEENTS;
ALTER TABLE DEPARTMEENTS ADD COLUMN E_FIRST 
SELECT * FROM MANAGEERS;

SELECT E_ID, E_FIRST, E_LAST, GENDER, DEPT_ID, DEPT_NAME 
FROM EMPLOYEEES 
NATURAL JOIN DEPARTMEENTS
WHERE GENDER = 'Female'
ORDER BY E_First;

SELECT E.E_ID, E.E_FIRST, E.E_LAST, E.GENDER, M.MGR_ID, M.MGR_FIRST, M.MGR_LAST FROM EMPLOYEEES E
INNER JOIN MANAGEERS M
ON (E.MGR_ID = M.MGR_ID);


SELECT * FROM EMPLOYEEES S
JOIN EMPLOYEEES T
ON (S.E_ID = T.E_ID);
WHERE ;

----------------------------------------SET Operations--------------------------------------
CREATE TABLE MANAGEERS_UPDATED AS (
SELECT * FROM MANAGEERS
WHERE MGR_ID > 110);

UPDATE MANAGEERS_UPDATED2K   ------------------Increased Salary by 2000 for all rows.
SET Salary = Salary + 2000;

CREATE TABLE MANAGEERS_UPDATED2K AS
(SELECT * FROM MANAGEERS_UPDATED);

SELECT * FROM MANAGEERS
UNION
SELECT * FROM MANAGEERS_UPDATED;

SELECT * FROM MANAGEERS_UPDATED2k
UNION
SELECT * FROM MANAGEERS;


SELECT * FROM MANAGEERS_UPDATED2K
UNION ALL
SELECT * FROM MANAGEERS;

SELECT * FROM MANAGEERS_UPDATED
UNION ALL
SELECT * FROM MANAGEERS;


SELECT * FROM MANAGEERS_UPDATED
INTERSECT
SELECT * FROM MANAGEERS;

SELECT * FROM MANAGEERS_UPDATED2K 
INTERSECT 
SELECT * FROM MANAGEERS;


SELECT * FROM MANAGEERS
MINUS
SELECT * FROM MANAGEERS_UPDATED;

SELECT * FROM MANAGEERS
MINUS
SELECT * FROM MANAGEERS_UPDATED2K;

----------------------------------------------------------------------------------------------------------
ALTER TABLE DEPARTMEENTS ADD  Location VARCHAR(45);

CREATE TABLE PROJECTS(
proj_id NUMBER(9) GENERATED BY DEFAULT AS IDENTITY(START WITH 500 INCREMENT BY 1) PRIMARY KEY,
proj_name VARCHAR(45),
dept_id NUMBER(9),
start_date date,
end_date date,
budget NUMBER
);

ALTER TABLE PROJECTS ADD CONSTRAINT fk_Projects_Departments_deptID 
FOREIGN KEY (dept_id) REFERENCES DEPARTMEENTS (dept_id);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('AI Automation Initiative', 50, TO_DATE('12-03-2018', 'DD-MM-YYYY'), TO_DATE('25-07-2019', 'DD-MM-YYYY'), 450000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Data Migration Upgrade', 51, TO_DATE('10-01-2020', 'DD-MM-YYYY'), TO_DATE('30-11-2020', 'DD-MM-YYYY'), 380000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('HR Management System', 52, TO_DATE('15-02-2019', 'DD-MM-YYYY'), TO_DATE('15-10-2019', 'DD-MM-YYYY'), 290000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Cybersecurity Enhancement', 53, TO_DATE('05-04-2021', 'DD-MM-YYYY'), TO_DATE('20-01-2022', 'DD-MM-YYYY'), 560000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Supply Chain Optimization', 54, TO_DATE('17-08-2020', 'DD-MM-YYYY'), TO_DATE('19-06-2021', 'DD-MM-YYYY'), 610000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('E-Governance Portal', 55, TO_DATE('01-03-2022', 'DD-MM-YYYY'), TO_DATE('12-12-2023', 'DD-MM-YYYY'), 720000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Smart Analytics Dashboard', 56, TO_DATE('09-09-2021', 'DD-MM-YYYY'), TO_DATE('30-04-2022', 'DD-MM-YYYY'), 340000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Mobile Banking Platform', 57, TO_DATE('21-07-2019', 'DD-MM-YYYY'), TO_DATE('10-03-2020', 'DD-MM-YYYY'), 500000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Cloud Infrastructure Setup', 58, TO_DATE('12-06-2022', 'DD-MM-YYYY'), NULL, 950000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Machine Learning Deployment', 52, TO_DATE('01-02-2023', 'DD-MM-YYYY'), NULL, 870000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Customer Support Chatbot', 50, TO_DATE('15-05-2020', 'DD-MM-YYYY'), TO_DATE('05-11-2020', 'DD-MM-YYYY'), 280000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Payroll Automation Tool', 55, TO_DATE('01-01-2018', 'DD-MM-YYYY'), TO_DATE('20-10-2018', 'DD-MM-YYYY'), 260000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('IoT Integration Project', 54, TO_DATE('22-03-2023', 'DD-MM-YYYY'), NULL, 910000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('ERP System Upgrade', 56, TO_DATE('19-08-2017', 'DD-MM-YYYY'), TO_DATE('22-04-2018', 'DD-MM-YYYY'), 670000);

INSERT INTO PROJECTS (proj_name, dept_id, start_date, end_date, budget)
VALUES ('Employee Training Platform', 57, TO_DATE('12-11-2022', 'DD-MM-YYYY'), NULL, 330000);




------------------------------------------------------------------------------------------------------------------
---------------------------------------------SOLVING SCENARIOS----------------------------------------------------
SELECT * FROM EMPLOYEEES;
SELECT * FROM DEPARTMEENTS;
SELECT * FROM PROJECTS;
SELECT * FROM MANAGEERS;

------------------------------------------------Senario#1-------------------------------------------------------
--Find employees who are between 25 and 35 years old, earn more than 70,000, and belong to departments 52, 54, or 57.
--Bonus: Exclude those who left the company.

SELECT * FROM EMPLOYEEES 
WHERE ((Age BETWEEN 25 AND 50) AND 
(Salary > 70000) AND 
(dept_id IN (52,54,57)) AND 
(leaving_date IS NULL));

------------------------------------------------Senario#2-------------------------------------------------------
--List all managers whose last name starts with ‘A’ or ends with ‘r’, but are not part of departments 50 or 58.

SELECT * FROM MANAGEERS
WHERE (mgr_last LIKE ('A%r')) 
--mgr_last = 'A%r';                ------------------Wildcard charachters don't work with '=' operator.
AND (dept_id NOT IN (50, 58));


------------------------------------------------Senario#-3------------------------------------------------------
--Display each employee’s full name, department name, and manager name using a JOIN.
--Bonus: Only show employees whose salary is less than their manager’s salary.

SELECT * FROM EMPLOYEEES;
SELECT * FROM DEPARTMEENTS;
SELECT * FROM MANAGEERS;

SELECT E.E_first || ' ' || E.E_last AS E_Name, 
D.dept_name,
M.mgr_first || ' ' || M.mgr_last AS M_Name

FROM EMPLOYEEES E
JOIN DEPARTMEENTS D ON (E.dept_id = D.dept_id)
JOIN MANAGEERS M ON (E.mgr_id = M.mgr_id)
WHERE E.Salary < M.Salary
Order By M_Name;

------------------------------------------------Senario#-4------------------------------------------------------
--Find employees working in “Finance” or “IT” departments, who joined after 2018 and have no leaving date (still working).
SELECT * FROM EMPLOYEEES E
JOIN DEPARTMEENTS D
ON (E.dept_id = D.dept_id)
------WHERE EXISTS(SELECT dept_id FROM DEPARTMENTS ------Trying with EXISTS clause......
WHERE (D.dept_name IN ('Finance', 'IT'))
AND(E.joining_date >TO_DATE('12-12-2018','DD-MM-YYYY'))
AND (E.leaving_date IS NULL);

------------------------------------------------Senario#-5------------------------------------------------------
--Show all departments and their managers, including departments that currently don’t have a manager assigned.
SELECT D.dept_id, D.dept_name, M.mgr_first || ' ' || M.mgr_last FROM DEPARTMEENTS D
LEFT OUTER JOIN MANAGEERS M
ON (D.dept_id = M.dept_id);

------------------------------------------------Senario#-6------------------------------------------------------
--Managers and employees who have same last names → use INTERSECT.
--People who are in employees but not in managers → use MINUS.
--All unique names from both tables → use UNION.

SELECT E_last FROM EMPLOYEEES
INTERSECT
SELECT mgr_last FROM MANAGEERS;

SELECT e_first, e_last FROM EMPLOYEEES
MINUS 
SELECT mgr_first, mgr_last FROM MANAGEERS;

SELECT e_first || ' ' || e_last AS Name FROM EMPLOYEEES
UNION 
SELECT mgr_first || ' ' || mgr_last FROM MANAGEERS;

------------------------------------------------Senario#-7------------------------------------------------------
--List the top 5 highest-paid employees, skipping the top 2 (i.e., ranks 3–7).

SELECT * FROM EMPLOYEEES
ORDER BY SALARY DESC
OFFSET 2 ROWS
FETCH NEXT 5 ROWS WITH TIES;

------------------------------------------------Senario#-8------------------------------------------------------
--Get all projects with their department names and managers, and show how many employees are working under each department.

SELECT * FROM PROJECTS;

--select * from (;

SELECT P.proj_name, D.dept_name, M.mgr_first || ' ' || M.mgr_last AS Manager_NAME,
(SELECT COUNT(*) FROM EMPLOYEEES WHERE dept_id = P.dept_id) AS Working_Employees

FROM PROJECTS P
JOIN DEPARTMEENTS D ON (P.dept_id = D.dept_id)
JOIN MANAGEERS M ON (P.dept_id = M.dept_id)

ORDER BY Proj_name;

--SELECT P.proj_name, D.dept_name, M.mgr_first || ' ' || M.mgr_last AS Manager_NAME, count(*) as working_emp
--FROM PROJECTS P
--JOIN DEPARTMEENTS D ON (P.dept_id = D.dept_id)
--JOIN MANAGEERS M ON (P.dept_id = M.dept_id)
--JOIN EMPLOYEEES E ON (P.dept_id = E.dept_id)
--
--group by proj_name, dept_name, M.mgr_first || ' ' || M.mgr_last
--ORDER BY p.Proj_name
--;

--group by proj_name, dept_name, manager_name;

--SELECT COUNT(*) FROM EMPLOYEEES E
--JOIN MANAGEERS M
--ON E.mgr_id = M.mgr_id;

--SELECT (SELECT COUNT(*) FROM EMPLOYEES WHERE dept_id = P.dept_id) AS workers,dept_name, e_first, e_last FROM DEPARTMEENTS
--NATURAL JOIN EMPLOYEEES
--Order by dept_name;

------------------------------------------------Senario#-9------------------------------------------------------
--Find all employees who are not assigned to any active project (end_date IS NULL in PROJECTS), 
--and who joined between 2015 and 2020.

SELECT * FROM EMPLOYEEES E
NATURAL JOIN PROJECTS P
WHERE (P.end_date IS NULL) AND (E.leaving_date IS NULL);


------------------------------------------------Senario#-10------------------------------------------------------
--Use a MERGE statement to synchronize data between a temporary TEMP_EMPLOYEES table and EMPLOYEEES.
--If the employee exists, update their salary; if not, insert a new record.

CREATE TABLE TEMP_EMPLOYEEES AS (SELECT * FROM EMPLOYEEES);
SELECT * FROM TEMP_EMPLOYEEES;
INSERT INTO TEMP_EMPLOYEEES(E_ID, E_FIRST, E_LAST, AGE, GENDER, DEPT_ID, MGR_ID, SALARY, JOINING_DATE, LEAVING_DATE)
VALUES(22, 'Nasir', 'Ullah', 24, 'Male', 55, 110, 76000, TO_DATE('25-10-2022', 'DD-MM-YYYY'), NULL);

MERGE INTO EMPLOYEEES T
USING TEMP_EMPLOYEEES S
ON (T.E_id = S.E_id)

WHEN MATCHED THEN
UPDATE SET 
T.SALARY = S.SALARY + 2000

WHEN NOT MATCHED THEN
INSERT (E_FIRST, E_LAST, AGE, GENDER, DEPT_ID, MGR_ID, SALARY, JOINING_DATE, LEAVING_DATE)
VALUES(S.E_FIRST, S.E_LAST, S.AGE, S.GENDER, S.DEPT_ID, S.MGR_ID, S.SALARY, S.JOINING_DATE, S.LEAVING_DATE);


------------------------------------------------Senario#-11------------------------------------------------------
--Retrieve all employees who meet at least one of these conditions:
--
--Salary > 80,000 and department between 51 and 56
--OR gender = ‘Female’ and joined between 2019 and 2022
--Sort them by department, then salary descending.

SELECT * FROM EMPLOYEEES
WHERE ((SALARY > 80000) AND (dept_id BETWEEN 51 AND 56))
OR ((Gender = 'Female') AND 
(joining_date BETWEEN TO_DATE('2019-01-01', 'YYYY-MM-DD') AND TO_DATE('2022-12-31', 'YYYY-MM-DD')));

------------------------------------------------Senario#-12------------------------------------------------------
--Display each employee’s name, department name, and manager name.
--Show only those whose manager and employee both belong to the same department
--and employee’s salary is between 60,000 and 90,000.

SELECT E_first || ' ' || E_last AS E_name, dept_name, mgr_first || ' ' || mgr_last AS Mgr_name
FROM EMPLOYEEES E
INNER JOIN DEPARTMEENTS D ON (E.dept_id = D.dept_id)
INNER JOIN MANAGEERS M ON (E.mgr_id = M.mgr_id) AND (E.dept_id = M.dept_id)
WHERE (E.dept_id = M.dept_id) AND (E.Salary BETWEEN 60000 AND 90000);

------------------------------------------------Senario#-13------------------------------------------------------
--Find all employees whose department is between 50 and 57,
--whose manager ID is not in (101, 104, 128, 132),
--and whose last name does not start with ‘A’.

SELECT * FROM EMPLOYEEES 
WHERE (dept_id BETWEEN 50 AND 57)
AND (mgr_id NOT IN (101, 104, 128, 132))
AND (E_last NOT LIKE('A%'))
AND (leaving_date IS NULL);

------------------------------------------------Senario#-14------------------------------------------------------
--List all employees who:
--Belong to departments where average salary > 75,000
--AND their joining date is after 2018
--Use an INNER JOIN between employees and departments.
SELECT * FROM EMPLOYEEES E
INNER JOIN DEPARTMEENTS D
ON (E.dept_id = D.dept_id)
WHERE (joining_date > TO_DATE('31-12-2018','DD-MM-YYYY'))
AND 
;
------------------------------------------------Senario#-15------------------------------------------------------
--Show all managers and the employees they supervise.
--Include managers who currently have no employees under them.
--Order by manager’s department ascending, manager’s name ascending.

SELECT mgr_first, mgr_last, e_first, e_last FROM MANAGEERS M
LEFT JOIN EMPLOYEEES E
ON (M.mgr_id = E.mgr_id)
ORDER BY M.dept_id ASC, M.mgr_first ASC;

------------------------------------------------Senario#-16------------------------------------------------------
--Using EMPLOYEEES and MANAGEERS:
--Display all people (by first + last name) who exist in both tables.
--Display all employees who are not managers.
--Display a combined list of all unique names from both.
--(Use INTERSECT, EXCEPT, UNION — one query for each)


SELECT E_first, E_last FROM EMPLOYEEES
INTERSECT
SELECT mgr_first, mgr_last FROM MANAGEERS;

SELECT E_first, E_last FROM EMPLOYEEES
MINUS
SELECT mgr_first, mgr_last FROM MANAGEERS;

SELECT E_first, E_last FROM EMPLOYEEES
UNION
SELECT mgr_first, mgr_last FROM MANAGEERS;

------------------------------------------------Senario#-17------------------------------------------------------
--List all employees who either:
--Are in dept_id 50 or 58 and earn > 70,000
--OR are in dept_id 52 and have worked under a manager whose salary < 120,000
--Use AND, OR, and NOT carefully to get correct filtering.

SELECT * FROM EMPLOYEEES
WHERE (dept_id IN (50,58) AND Salary > 70000)

OR (dept_id = 52) AND 
EXISTS(SELECT MANAGEERS.Mgr_id FROM MANAGEERS 
WHERE Employeees.Mgr_id = MANAGEERS.Mgr_id AND MANAGEERS.Salary < 120000);

----------
------
SELECT * FROM EMPLOYEEES
WHERE dept_id < 50 OR EXISTS(
SELECT mgr_id FROM MANAGEERS WHERE employeees.mgr_id = manageers.mgr_id AND manageers.mgr_first LIKE('A%'));

SELECT * FROM MANAGEERS; --113,117, 108,122, 128
------------------------------------------------Senario#-18------------------------------------------------------
--Join EMPLOYEEES → MANAGEERS → DEPARTMENTS.
--Display: Employee name, Manager name, Department name.
--Show only those employees whose salary is less than 80% of their manager’s salary.
SELECT 
E_first || ' ' || E_last AS Employee_Name, 
Mgr_first || ' ' || Mgr_last AS Manageer_Name,
dept_name,
E.SALARY, M.SALARY, M.SALARY * 0.8 AS MSALARY80
FROM EMPLOYEEES E
JOIN MANAGEERS M ON (E.Mgr_id = M.Mgr_id)
JOIN DEPARTMEENTS D ON (E.dept_id = D.dept_id)
WHERE E.SALARY < (M.SALARY*0.8);
------------------------------------------------Senario#-19------------------------------------------------------


------------------------------------------------Senario#-20------------------------------------------------------


------------------------------------------------Senario#-21------------------------------------------------------




